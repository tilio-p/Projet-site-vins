"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Config = void 0;
var _logger = require("@parcel/logger");
var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var PACKAGE_JSON_SECTION = "parcel-namer-rewrite";
var Config = exports.Config = /*#__PURE__*/function () {
  function Config() {
    _classCallCheck(this, Config);
    _defineProperty(this, "profileEnvKeyDeprecated", 'PARCEL-NAMER-REWRITE-PROFILE');
    _defineProperty(this, "profileEnvKey", 'PARCEL_NAMER_REWRITE_PROFILE');
    _defineProperty(this, "rules", void 0);
    _defineProperty(this, "chain", void 0);
    /**
     * Disable in development
     */
    _defineProperty(this, "disable", false);
    /**
     * Name hashing
     */
    _defineProperty(this, "hashing", '');
    // "never", "always"
    /**
     * Disable logging names
     */
    _defineProperty(this, "silent", false);
    /**
     * Use file name hashes from parcel
     */
    _defineProperty(this, "useParcelHash", true);
    this.rules = [];
    this.chain = '@parcel/namer-default';
  }
  _createClass(Config, [{
    key: "loadFromPackageFolder",
    value: function loadFromPackageFolder(rootFolder, env, defaultProfiles, logger) {
      var _this = this;
      var packageJson = _fs["default"].readFileSync(_path["default"].join(rootFolder, 'package.json')).toString();
      var packageInfo = JSON.parse(packageJson);
      var packageSection = packageInfo[PACKAGE_JSON_SECTION];
      if (!packageSection) {
        logger.warn({
          message: "no \"".concat(PACKAGE_JSON_SECTION, "\" section in package.json. Use no-rules config")
        });
        return;
      }
      this._loadFromPackageSection(packageSection, logger);
      var profileNames = '';
      if (defaultProfiles) profileNames += ',' + defaultProfiles;
      if (this.profileEnvKeyDeprecated in env) {
        logger.warn({
          message: "You are using deprecated environment variable ".concat(this.profileEnvKeyDeprecated, ". Consider switch to ").concat(this.profileEnvKey)
        });
        profileNames += ',' + env[this.profileEnvKeyDeprecated];
      }
      if (this.profileEnvKey in env) profileNames += ',' + env[this.profileEnvKey];
      var profileSections = packageSection['profiles'];
      if (profileSections) {
        profileNames.split(/[,]/).map(function (profile) {
          return profileSections[profile];
        }).filter(function (profile) {
          return !!profile;
        }).forEach(function (profile) {
          _this._loadFromPackageSection(profile, logger);
        });
      }
    }
  }, {
    key: "_loadFromPackageSection",
    value: function _loadFromPackageSection(section, logger) {
      var _this2 = this;
      if (!section) return;
      if ('profile-env-key' in section) {
        this.profileEnvKey = section['profile-env-key'];
      }
      if ('chain' in section) {
        this.chain = section.chain;
      }
      if ('neverHashing' in section) {
        this.neverHashing = !!section.neverHashing;
      }
      this.silent = 'silent' in section && section.silent;
      if ('useParcelHash' in section) {
        this.useParcelHash = !!section.useParcelHash;
      }
      if ('rules' in section) {
        Object.keys(section.rules).forEach(function (k) {
          var ruleData = section.rules[k];
          var ruleTo = typeof ruleData === 'string' ? ruleData : null;
          if (ruleTo === null) {
            logger.warn("No \"to\" rule for test \"".concat(k, "\" "));
            return;
          }
          _this2.rules.push({
            test: new RegExp(k),
            to: ruleTo
          });
        });
      }
      if ('developmentHashing' in section) {
        throw Error("The \"developmentHashing\" option is not supported any more. Add \"development\" profile and set {\"hashing\": \"never\"} there. See documentation for details here: https://github.com/ol-loginov/parcel-namer-rewrite");
      }
      if ('developmentDisable' in section) {
        throw Error("The \"developmentDisable\" option is not supported any more. Add \"development\" profile and set {\"disable\": false} there. See documentation for details here: https://github.com/ol-loginov/parcel-namer-rewrite");
      }
      if ('hashing' in section) {
        this.hashing = section['hashing'];
      }
      if ('disable' in section) {
        this.disable = !!section['disable'];
      }
    }
  }, {
    key: "selectRule",
    value: function selectRule(name) {
      var matches = this.rules.map(function (rule) {
        return rule.test.test(name) ? rule : null;
      }).filter(function (rule) {
        return rule != null;
      });
      if (matches.length > 0) {
        return matches[0];
      }
      return null;
    }
  }]);
  return Config;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,